# OpenCore install.py .env sample
# ===============================================
# System identity (required)
# -----------------------------------------------
# Per-system sensitive values saved into the
# generated OpenCore config.plist.
# Keeping them here allows sharing the main
# config.plist without disclosing one's values.
# See OpenCore documentation for more information.

## PlatformInfo.Generic.SystemSerialNumber
SYSTEM_SERIAL =

## PlatformInfo.Generic.ROM
SYSTEM_ROM =

## PlatformInfo.Generic.MLB
SYSTEM_MLB =

## PlatformInfo.Generic.SystemUUID
SYSTEM_UUID =

# OpenCore Security Settings
# -----------------------------------------------
# These values are also either sensitive or were
# added here for the convenience of quickly
# changing them without modifying the main plist.
# Values from the main config.plist are used if
# none are specified here.
# See OpenCore documentation for more information.

## Misc.Security.ApECID
#SEC_APECID = 0

## Misc.Security.Vault
#SEC_VAULT = Optional

## Misc.Security.ScanPolicy
#SEC_SCAN_POLICY = 0

# OpenCore Vault generation
# -----------------------------------------------
# A OC vault is always generated, but only verified
# by OC according to SEC_VAULT above.

## Vault key size
# RSA size used when generating a new vault key
#VAULT_KEY_SIZE = 2048

## Persistent vault key
# By default, following the OC sign_vault.command,
# a temporary key is used and immediately discarded.
# By specifying this, a persistent key can be used
# instead. A new key is generated if it doesn't exist.
#VAULT_KEY_FILE = /path/to/oc_vault.pem

# EFI system partition
# -----------------------------------------------
## EFI system partition mount path (currently mandatory)
ESP_PATH = /efi

## OpenCore target folder name in ESP:\EFI
#ESP_NAME = OC

## Backup folder name in ESP:\EFI
# Previous installation will be renamed such before
# copying new files
#ESP_BACKUP = OC.bak

## Automatically restore backup if installation fails for any reason
#ESP_RESTORE_ON_ERROR = true

# SecureBoot signing
# -----------------------------------------------
# By default, no SecureBoot signing takes place,
# but different tools are available

### sbctl (using sbctl keys)
# https://github.com/Foxboron/sbctl
#SB_TOOL = sbctl

### sbsign (using arbitrary key)
# https://github.com/phrack/sbsigntools
#SB_TOOL = sbsign
#SB_SBSIGN_KEY = /path/to/sb_key.pem
#SB_SBSIGN_CERT = /path/to/sb_cert.crt

### Cache only (see below)
#SB_TOOL = cacheonly

# Fall back to unsigned images if no signed ones found in cache
#SB_CACHEONLY_ALLOW_UNSIGNED = false


# SecureBoot image cache
# -----------------------------------------------
# Signed UEFI images can be saved to a cache
# This is useful with a persistent vault key to be able
# to skip signing the same image over and over. It can even
# be used with the 'cacheonly' SB_TOOL to only use previously
# signed images without access to the key material, allowing
# config or kext updates from multiple OSs in a multiboot
# environment without making the SB keys widely available

## SecureBoot image cache path
#SB_CACHE_PATH = /path/to/oc_signed_images

## Cache filename format
# Format Placeholders:
#   %n Image name (e.g. OpenCore)
#   %h Hash of the unsigned image
#   %e Original filename extension (should be .efi)
# At least one of %n or %h must be included, since all UEFI
# images (including drivers) need to be signed
#SB_CACHE_FORMAT = %n.%h%e

## Allow adding main OpenCore image to cache
# The main OpenCore image will never match a previous
# version if a temporary vault key is used, making
# adding it to the cache a waste of space.
# Choices are never, always and auto.
# 'auto' will only cache the OpenCore image when a
# persistent vault key is configured above
#SB_CACHE_OPENCORE = auto

# Ignore mismatch in internal checksum between
# raw image and cached signed image.
#SB_CACHE_IGNORE_MISMATCH = false
